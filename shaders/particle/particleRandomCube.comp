#version 450
#extension GL_ARB_separate_shader_objects : enable

// GPU Buffer layout
struct Particle
{
    vec4 pos;
    vec4 vel;
    vec4 acc;
};

layout (local_size_x_id = 0) in;

layout(binding = 0) buffer Pos
{
    Particle particles[];
};

layout(binding = 1) uniform ParticleComputeUbo {
    uint particleCount;
    vec3 genCenter;
    vec2 range;
    uvec2 seedX;
    uvec2 seedY;
    uvec2 seedZ;
} ubo;

uint random_number_generator(uint index, uvec2 randoms)
{
    uint seed = (randoms.x + index * 168468498) ^ (randoms.y << 8);
    seed = (seed << 9) * seed;
    uint t = seed ^ (seed << 11);
    t = (t >> 5) ^ (t * 9135723);
    uint result = randoms.y ^ (randoms.y >> 19) ^ (t ^ (t >> 8));
    result = (result << 7) * 415645;

    return (result);
}

float linearRandom(uint index, float min, float max, uvec2 seed)
{
    uint nb = random_number_generator(index, seed);
    float ran = (nb / 4294967295.0f);

    return (ran * (max - min) + min);
}

void main()
{
    uint id = gl_GlobalInvocationID.x;
    if (id >= ubo.particleCount) {
        return;
    }

    particles[id].pos.x = linearRandom(id, ubo.range.x, ubo.range.y, ubo.seedX) + ubo.genCenter.x;
    particles[id].pos.y = linearRandom(id, ubo.range.x, ubo.range.y, ubo.seedY) + ubo.genCenter.y;
    particles[id].pos.z = linearRandom(id, ubo.range.x, ubo.range.y, ubo.seedZ) + ubo.genCenter.z;
    particles[id].pos.w = 1.0f;
    particles[id].vel = vec4(0.0f);
    particles[id].acc = vec4(0.0f);
}
